/* HeapList
 * @author Siwei Liu
 * A heap that works like an array list
 */

import Heap
import Iterator

class HeapList (Heap, Iterator) {

	var _size = 0
	_root = _Node()

	@(arg) {
		if arg != null && $is_list(arg) {
			init(arg)
		}
	}

	func init(lst) {
		_size = 0
		var i = 0
		for e in lst {
			put(i++, e)
		}
	}

	func put(index, value) {
		_getNodeByPath(_getPathByIndex(index), true).value = value
		if index + 1 > _size {
			_size = index + 1
		}
	}

	func get(index) {
		index /= 1
		if !(index >= 0) { return null }
		var target = _getNodeByPath(_getPathByIndex(index), false)
		if target {
			return target.value
		} else {
			return null
		}
	}

	func size() {
		return _size
	}
	
	func clear() {
		_root = _Node()
		_size = 0
	}
	
	func toList() {
		var list = []
		for i in size()-1...0 by -1 {
			list = $pair(get(i), list)
		}
		return list
	}
	
	func toString() {
		var str = "["
		for i in 0..<size()-1 {
			str += (get(i) + ", ")
		}
		if size() > 0 {
			str += (get(size()-1) + "]")
		} else {
			str += "]"
		}
		return str
	}
	
	func iterator() {
		it := Iterator(0)
		it.setNextFunc(func() {
			next_element := get(it.getCurrent())
			it.setCurrent(it.getCurrent() + 1) 
			return next_element
		})
		return it
	}
}
