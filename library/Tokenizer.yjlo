/*
 * A tokenizer written in YJLO Script
 * @author Liu Siwei
 */

class Tokenizer {
	
	var tokens = []
	
	class Token {
		var type
		var value
		
		@(type_, value_) {
			type = type_
			value = value_
		}
	}
	
	func _strToNum(str) {
		func help(lst, num){
			if lst.isEmpty { return num }
			var d = $char_code(lst.head) - $char_code("0")
			return help(lst.tail, num*10+d)
		}

		return help($string_to_char_list(str), 0)
	}

	func tokenize(str) {
		var result = []
		var chars = $string_to_char_list(str)
		var reversed_tokens = []

		var current = ""
		while !chars.isEmpty {
			var c = chars.head
			// Ignore whitespace.
			if c == " " {
				chars = chars.tail
				continue
			// number.
			} else if c >= '0' && c <= '9' {
				current = c
				chars = chars.tail
				c = chars.head
				while !chars.isEmpty && c >= '0' && c <= '9' {
					current += c
					chars = chars.tail
					c = chars.head
				}
				//print("number ", _strToNum(current))
				reversed_tokens = (Token("number", _strToNum(current)), reversed_tokens)
			// operator
			} else {
				//print("char ", c)
				chars = chars.tail
				reversed_tokens = (Token("operator", c),reversed_tokens)
			}
		}
		// reverse tokens
		while !reversed_tokens.isEmpty {
			tokens = (reversed_tokens.head, tokens)
			reversed_tokens = reversed_tokens.tail
		}
	}
}
