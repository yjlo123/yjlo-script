/* Heap
 * @author Siwei Liu
 * An abstract heap
 */

class Heap {
	
	class _Node {
		var value, left, right
	}

	var _root

	@() {
		_root = _Node()
	}

	/**
	 * given an index, return the path from root 
	 * 1: go left
	 * 0: go right
	 */
	func _getPathByIndex(n) {
		var pathList = []
		if n == 0 { return pathList }
		pathList = $pair(n % 2, pathList)
		n = (n - 1) / 2
		while n != 0 {
			pathList = $pair(n % 2, pathList)
			n = (n - 1) / 2
		}
		return pathList
	}

	/**
	 * In create mode, unexisting nodes will be created
	 * while going through the path
	 */
	func _getNodeByPath(path, create) {
		if $is_empty(path) { return _root }
		var current = _root
		while !$is_empty(path) && current != null {
			if $head(path) == 1 {
				if current.left == null && create {
					current.left = _Node()
				}
				current = current.left
			} else {
				if current.right == null && create {
					current.right = _Node()
				}
				current = current.right
			}
			path = $tail(path)
		}
		return current
	}

}
