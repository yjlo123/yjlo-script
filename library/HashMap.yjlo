/* HashMap
 * @author Liu Siwei (liusiwei.yjlo@gmail.com)
 * A hash map implemented using heap
 */

import Heap

class HashMap (Heap) {
	
	/* for building heap */
	// Override
	class _Node {
		var entry = []
		var left = null
		var right = null
		func toString() {
			var str = ""
			var tempEntry = entry
			for e in tempEntry {
				str += e.toString()
			}
			return str
		}
	}
	
	/* for storing key value pairs */
	class _Entry {
		var key, value
		
		@(k, v) {
			key = k
			value = v
		}
		
		func toString() {
			return "("+key+", "+value+")"
		}
	}
	
	var _CAPACITY
	var _size = 0
	var _root 
	
	@(capacity) {
		if capacity {
			_CAPACITY = capacity
		} else {
			_CAPACITY = 63
		}
		
		// Override
		_root = _Node()
	}

	func hashCode(str) {
		var hash = 0
		var chars = $string_to_char_list(str)
		if $is_empty(chars) { return hash }
		for chr in chars {
			hash = ((hash << 5) - hash) + $char_code(chr)
			hash = hash & hash // Convert to 32bit integer
		}
		return hash % _CAPACITY
	}
	
	func clear() {
		_root = _Node()
		_size = 0
	}

	/**
	 * Parameters:
	 *     @param key the hashtable key
	 *     @param value the value
	 * Returns:
	 *     the previous value of the specified key in this hashmap,
	 *     or null if it did not have one
	 */
	func put(key, value) {
		var index = hashCode(key)
		var target = _getNodeByPath(_getPathByIndex(index), true)
		var entries = target.entry
		for entry in entries {
			if entry.key == key {
				// found existing key
				var prev_value = entry.value
				entry.value = value
				return prev_value
			}
		}
		// new key
		target.entry = $pair(_Entry(key, value), target.entry)
		_size++
		return null
	}

	func get(key) {
		var index = hashCode(key)
		var target = _getNodeByPath(_getPathByIndex(index), false)
		if target {
			var list = target.entry
			for e in list {
				if e.key == key {
					return e.value
				}
			}
			return null
		}
		return null
	}
	
	func remove(key) {
		func deleteFromList(list, key) {
			if $is_empty(list) { return list }
			if $head(list).key == key {
				_size--
				return deleteFromList($tail(list), key)
			} else {
				return $pair($head(list), deleteFromList($tail(list), key))
			}
		}
		var index = hashCode(key)
		var target = _getNodeByPath(_getPathByIndex(index), false)
		if target {
			var list = target.entry
			var foundEntry = null
			for e in list {
				if e.key == key {
					foundEntry = e
					target.entry = deleteFromList(target.entry, key)
					return foundEntry.value
				}
			}
			return null
		}
		return null
	}
	
	func size() {
		return _size
	}
	
	func toString() {
		var str = ""
		for i in 0..<_CAPACITY {
			var node = _getNodeByPath(_getPathByIndex(i), false)
			if node != null && !$is_empty(node.entry) {
				str += (i + ": " + node.toString() + "\n")
			}
		}
		return str
	}
}
