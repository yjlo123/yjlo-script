/**
 * List Util
 * @author Liu Siwei
 */

class ListUtil {
	func set(lst, n, v) {
		if ($is_empty(lst)) return lst;
		if (n == 0) return $pair(v, $tail(lst));
		else return $pair($head(lst), set($tail(lst), n-1, v));
	}

	func get(lst, n) {
		if $is_empty(lst) { return null; }
		if n == 0 { return $head(lst); }
		else return get($tail(lst), n - 1);
	}
	
	func len(lst) {
		return $is_empty(lst) ? 0 : 1 + len($tail(lst));
	}
	
	func equal(lst1, lst2) {
		if !$is_list(lst1) || !$is_list(lst2) { return false; }
		if $is_empty(lst1) && $is_empty(lst2) { return true; }
		if $is_empty(lst1) || $is_empty(lst2) { return false; }
		return $head(lst1) == $head(lst2) && equal($tail(lst1), $tail(lst2));
	}
	
	/* return the index of the first val in a list */
	func index(lst, val) {
		var i = 0;
		while !$is_empty(lst) {
			if $head(lst) == val {
				return i;
			}
			i++;
			lst = $tail(lst);
		}
		return -1;
	}
	
	func append(lst, val) {
		if $is_empty(lst) { return $pair(val, lst); }
		return $pair($head(lst), append($tail(lst), val));
	}
	
	func getLast(lst) {
		if ($is_empty(lst)) {
			return [];
		}
		if ($is_empty($tail(lst))) {
			return $head(lst);
		}
		return getLast($tail(lst));
	}
	
	func sort(lst) {
		return sortBy(lst, func(x){ return x; });
	}
	
	func sortBy(lst, fun) {
		func insert(a, l) { // num, list
			if $is_empty(l) { return [a]; }
			if fun(a) < fun($head(l)) { return $pair(a, l); }
			return $pair($head(l), insert(a, $tail(l)));
		}
		func help(l, n) { // left, new
			if ($is_empty(l)) return n;
			n = insert($head(l), n);
			return help($tail(l), n);
		}
		return help(lst, []);
	}
	
	func max(lst) {
		if $is_empty(lst) { return null; }
		var max = $head(lst);
		lst = $tail(lst);
		while !$is_empty(lst) {
			if $head(lst) > max {
				max = $head(lst);
			}
			lst = $tail(lst);
		}
		return max;
	}
	
	func min(lst) {
		if $is_empty(lst) { return null; }
		var min = $head(lst);
		lst = $tail(lst);
		while !$is_empty(lst) {
			if $head(lst) < min {
				min = $head(lst);
			}
			lst = $tail(lst);
		}
		return min;
	}
	
	func reverse(lst) {
		if $is_empty(lst) { return lst; }
		var reversed = $list();
		while !$is_empty(lst) {
			reversed = $pair($head(lst), reversed);
			lst = $tail(lst);
		}
		return reversed;
	}
	
	func concat(lst1, lst2) {
		if $is_empty(lst1) { return lst2; }
		return $pair($head(lst1), concat($tail(lst1), lst2));
	}
}
