/* LinkedList
 * @author Liu Siwei (liusiwei.yjlo@gmail.com)
 * Followed JDK 8 java.util.LinkedList
 */

func LinkedList() {
	func _Node(prev_, element_, next_) {
		var item = element_;
		var next = next_;
		var prev = prev_;
		
		return func(){};
	}
	
	var EMPTY_LIST_EXCEPTION_MESSAGE = "Exception: empty list.";
	
	var _size = 0;
	
	/* Pointer to first node. */
	var _first = null;
	
	/* Pointer to last node. */
	var _last = null;

	/* Returns the number of elements in this list. */
	func size() {
		return _size;
	}
	
	/* Appends the specified element to the end of this list.
	 * This method is equivalent to addLast */
	func add(e) {
		_linkLast(e);
		return true;
	}
	
	/* Inserts the specified element at the beginning of this list. */
	func addFirst(e) {
		_linkFirst(e);
	}
	
	/* Appends the specified element to the end of this list. */
	func addLast(e) {
		_linkLast(e);
	}
	
	/* Links e as first element. */
	func _linkFirst(e) {
		var f = _first;
		var newNode = _Node(null, e, f);
		_first = newNode;
		if f == null {
			_last = newNode;
		} else {
			f.prev = newNode;
		}
		_size++;
	}

	/* Links e as last element. */
	func _linkLast(e) {
		var l = _last;
		var newNode = _Node(l, e, null);
		_last = newNode;
		if l == null {
			_first = newNode;
		} else {
			l.next = newNode;
		}
		_size++;
	}
	
	func clear() {
		var x = _first;
		while x != null {
			var next = x.next;
			x.item = null;
			x.next = null;
			x.prev = null;
			x = next;
		}
		_first = null;
		_last = null;
		_size = 0;
	}
	
	/* Returns the first element in this list. */
	func getFirst() {
		var f = _first;
		if f == null {
			throw(EMPTY_LIST_EXCEPTION_MESSAGE);
		}
		return f.item;
	}
	
	/* Returns the last element in this list. */
	func getLast() {
		var l = _last;
		if l == null {
			throw(EMPTY_LIST_EXCEPTION_MESSAGE);
		}
		return l.item;
	}
	
	/* Removes and returns the first element from this list. */
	func removeFirst() {
		var f = _first;
		if f == null {
			throw(EMPTY_LIST_EXCEPTION_MESSAGE);
		}
		return _unlinkFirst(f);
	}
	
	/* Removes and returns the last element from this list. */
	func removeLast() {
		var l = _last;
		if l == null {
			throw(EMPTY_LIST_EXCEPTION_MESSAGE);
		}
		return _unlinkLast(l);
	}
	
	/* Unlinks non-null first node f. */
	func _unlinkFirst(f) {
		// assert f == first && f != null;
		var element = f.item;
		var next = f.next;
		f.item = null;
		f.next = null;
		_first = next;
		if next == null {
			_last = null;
		} else {
			next.prev = null;
		}
		_size--;
		return element;
	}
	
	/* Unlinks non-null last node l. */
	func _unlinkLast(l) {
		// assert l == last && l != null;
		var element = l.item;
		var prev = l.prev;
		l.item = null;
		l.prev = null;
		_last = prev;
		if prev == null {
			_first = null;
		} else {
			prev.next = null;
		}
		_size--;
		return element;
	}
	
	/* Returns the index of the first occurrence
	 * of the specified element in this list,
	 * or -1 if this list does not contain the element.*/
	func indexOf(o) {
		var index = 0;
		if o == null {
			var x = _first;
			while x != null {
				if x.item == null {
					return index;
				}
				index++;
				x = x.next;
			}
		} else {
			
			var x = _first;
			while x != null {
				// if o.equals(x.item_) ...
				if o == x.item {
					return index;
				}
				index++;
				x = x.next;
			}
		}
		return -1;
	}
	
	return func(){};
}