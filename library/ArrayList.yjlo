/*
Array List
@author Siwei Liu
*/

import Iterator

class ArrayList (Iterator) {
	DEFAULT_CAPACITY := 10
	_size := 0
	
	elementData := null
	
	@(value) {
		if value == null {
			this.elementData = Array(DEFAULT_CAPACITY)
		} else if (value.isList) {
			this.elementData = Array(value.len)
			_size = value.len
			i := 0
			while !value.isEmpty {
				elementData[i++] = value.head
				value = value.tail
			}
		} else if value > 0 {
			this.elementData = Array(value)
		} else {
			throw("Illegal Capacity: " + value)
		}
	}
	
	func rangeCheck(index) {
		if index >= _size {
			throw("ArrayList:IndexOutOfBoundsException " +
				  "Index: " + index + ", Size: " + _size)
		}
	}
	
	func ensureCapacity(minCapacity) {
		if minCapacity - elementData.len > 0 {
			oldCapacity := elementData.len
			newCapacity := oldCapacity + (oldCapacity >> 1)
			grownElementData := Array(newCapacity)
			for i in 0..<_size {
				grownElementData[i] = elementData[i]
			}
			elementData = grownElementData
		}
	}
	
	func size() {
		return _size
	}
	
	func capacity() {
		return elementData.len
	}
	
	func add(e) {
		ensureCapacity(_size + 1)
		elementData[_size++] = e
		return true
	}
	
	func set(index, element) {
		rangeCheck(index)
		oldValue := elementData[index]
		elementData[index] = element
		return oldValue
	}
	
	func get(index) {
		rangeCheck(index)
		return elementData[index]
	}
	
	func toString() {
		str := "["
		for i in 0..<_size {
			str += elementData[i]
			if i < _size - 1 {
				str += ", "
			}
		}
		return str + "]"
	}
	
	func toList() {
		result := []
		i := _size - 1
		while i >= 0 {
			result = (elementData[i--], result)
		}
		return result
	}
	
	func iterator() {
		it := Iterator(0)
		it.setNextFunc(func() {
			next_element := elementData[it.getCurrent()]
			it.setCurrent(it.getCurrent() + 1) 
			return next_element
		})
		return it
	}
}
