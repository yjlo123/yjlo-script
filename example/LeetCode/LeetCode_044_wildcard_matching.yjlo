/* LeetCode 44. Wildcard Matching
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false
*/

func isMatch(str, pattern) {
	str = str.toCharList
	pattern = pattern.toCharList
	var star_pattern, star_str
	while !str.isEmpty {
		// advancing both pointers
		if !pattern.isEmpty && (pattern.head == '?' || str.head == pattern.head) {
			str = str.tail
			pattern = pattern.tail
		}
		// * found, only advancing pattern pointer
		else if !pattern.isEmpty && pattern.head == '*' {
			// print("*")
			star_pattern = pattern
			star_str = str
			pattern = pattern.tail
		}
		// last pattern pointer was *, advancing string pointer
		else if star_pattern != null {
			pattern = star_pattern.tail
			star_str = star_str.tail
			str = star_str
		}
		//current pattern pointer is not star, last patter pointer was not *
		//characters do not match
		else { return false }
	}

	//check for remaining characters in pattern
	while !pattern.isEmpty && pattern.head == '*' {
		pattern = pattern.tail
	}

	return pattern.isEmpty
}

func test(str, pattern, result) {
	if isMatch(str, pattern) == result {
		print("Pass")
	} else {
		print("Fail [", str, pattern, "] expected:", result)
	}
}

test("aa", "a", false)
test("aa", "aa", true)
test("aaa", "aa", false)
test("aa", "*", true)
test("aa", "a*", true)
test("aa", "?*", true)
test("aab", "c*a*b", false)
test("abc", "*c", true)
test("aabbcc", "a*c", true)
test("aabbcc", "a*bc", false)
test("wabc", "wa*f*", false)
