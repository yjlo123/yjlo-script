/* LeetCode 56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/

import ListUtil

class Interval {
	start := 0
	end := 0
	@(s, e) {
		start = s
		end = e
	}
	func toString() {
		return "[" + start + ", " + end + "]"
	}
}

func merge(intervals) {
	if intervals.isEmpty { return [] }
	current := intervals.head
	start := current.start
	end := current.end
	intervals = intervals.tail
	while !intervals.isEmpty && intervals.head.start <= end {
		if intervals.head.end > end {
			end = intervals.head.end
		}
		intervals = intervals.tail
	}
	return (Interval(start, end), merge(intervals))
}

func list_to_intervals(lst) {
	if lst.isEmpty { return [] }
	head := lst.head
	start := head.head
	end := head.tail.head
	return (Interval(start, end), list_to_intervals(lst.tail))
}

intervals := [[8,10],[1,3],[15,18],[2,6]]
intervals = list_to_intervals(intervals)

// sort intervals by start
intervals = ListUtil.sortBy(intervals, func(interval){return interval.start})

// print merge result
print(merge(intervals))
