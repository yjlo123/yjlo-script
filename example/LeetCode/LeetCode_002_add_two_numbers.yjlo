/* LeetCode 2. Add Two Numbers
You are given two non-empty linked lists representing two
non-negative integers. The digits are stored in reverse 
order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading
zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/
import StringUtil

// print list elements in reversed order
func printNumber(list, width) {
	var result = ""
	for d in list {
		result = d + result
	}
	var space = width-StringUtil.len(result)
	for i in 0..<space {
		result = " " + result
	}
	print(result)
}

func addTwoNumbersCarry(l1, l2, carry) {
	if $is_empty(l1) && $is_empty(l2) && carry == 0 {
		return []
	} 
	var value = ($is_empty(l1) ? 0 : $head(l1)) + ($is_empty(l2) ? 0 : $head(l2)) + carry
	return $pair(value % 10,
				 addTwoNumbersCarry($is_empty(l1) ? [] : $tail(l1),
					$is_empty(l2) ? [] : $tail(l2),
					value / 10))
}

// number 582626823
var num1 = [3,2,8,6,2,6,2,8,5]
// number 92802991
var num2 = [1,9,9,2,0,8,2,9]

put("Num1: ")
printNumber(num1, 10)
put("Num2: ")
printNumber(num2, 10)

put("Sum:  ")
printNumber(addTwoNumbersCarry(num1, num2, 0), 10)
