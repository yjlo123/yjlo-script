/* Dependency resolving
   @author Siwei Liu

      [A]
     /  \
    v    v
   [D]   [B]
    ^   /   \
     \ v     v
     [C] --> [E]
*/
class Node {
	var name = ''
	var edges = []
	
	@(n) {
		this.name = n
	}
	
	func addEdge(node) {
		func help(node, head) {
			if head.isEmpty {
				return (node, head)
			}
			return (head.head, help(node, head.tail))
		}
		edges = help(node, edges)
	}
}

a := Node('a')
b := Node('b')
c := Node('c')
d := Node('d')
e := Node('e')

a.addEdge(b)
a.addEdge(d)
b.addEdge(c)
b.addEdge(e)
c.addEdge(d)
c.addEdge(e)

//d.addEdge(b) // circular dependency

func isInList(node, list) {
	if list.isEmpty { return false }
	if node.name == list.head.name { return true }
	return isInList(node, list.tail)
}

func removeFromList(node, list) {
	if list.isEmpty { return [] }
	if list.head.name == node.name { return list.tail }
	return (list.head, removeFromList(node, list.tail))
}

func depResolve(node, unresolved){
	unresolved = (node, unresolved)
	var edges = node.edges
	for edge in edges {
		if !isInList(edge, resolved) {
			if isInList(edge, unresolved) {
			throw('Circular dependency detected: '
					+node.name+' -> '+edge.name)
			}
			depResolve(edge, unresolved)
		}
	}
	resolved = (node, resolved)
	unresolved = removeFromList(node, unresolved)
}
resolved := []
depResolve(a, [])

func printReverse(list) {
	if list.isEmpty {
		return
	}
	printReverse(list.tail)
	print(list.head.name)
}
printReverse(resolved)
