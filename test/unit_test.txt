var counter = 0;
var pass = 0;
var all_pass = true;

func setup_test_set(title) {
	counter = 0;
	pass = 0;
	print(" ===== " + title + " ===== ");
}

func print_test_set_result() {
	if counter == pass {
		print("    === [All passed] === ");
		return true;
	} else {
		print("    === [" + (counter-pass) + " failed] ===");
		all_pass = false;
		return false;
	}
}

func assert_equal (a, b) {
	counter++;
	if a == b {
		print("[" + counter + "]" + " Pass");
		pass++;
	} else {
		print("[" + counter + "]" + " Fail " + "[Expect] " + b +" [Actual] " + a);
	}
}

func assert_true(a) {
	assert_equal(a, true);
}

func assert_false(a){
	assert_equal(a, false);
}

func test_arithmetic() {
	setup_test_set("Test Arithmetic");
	
	/* basic */
	assert_equal( -5*2, -10 );
	assert_equal( (-5)*2, -10 );
	assert_equal( (-5*2), -10 );
	assert_equal( 2*(-5), -10 );
	assert_equal( 8+3, 11 );
	assert_equal( 8-3, 5 );
	assert_equal( 8-(-3), 11 );
	assert_equal( 8*3, 24 );
	assert_equal( 8/3, 2 );
	assert_equal( 8/.5, 1.6 );
	assert_equal( 8%3, 2 );
	assert_equal( 8**3, 512 );
	
	/* variable */
	var a = 4;
	var b = 9;
	var c = -5;
	assert_equal( a+b, 13 );
	assert_equal( a-b, -5 );
	assert_equal( a*b, 36 );
	assert_equal( b/a, 2 );
	assert_equal( b/.a, 2.25 );
	assert_equal( (b-a), 5 );
	assert_equal( (b-(-a)), 13 );
	assert_equal( c**2, 25 );
	assert_equal( c**0, 1 );
	assert_equal( b%a, 1 );
	assert_equal( b-c, 14 );
	assert_equal( c-b, -14 );
	
	/* complex */
	assert_equal( b-a*2, 1 );
	assert_equal( c+b/2, -1 );
	assert_equal( c+b/.2, -0.5 );
	assert_equal( (b+c)**3, 64 );
	assert_equal( c**2/5, 5 );
	assert_equal( (a+4)*(b-4), 40 );
	assert_equal( ((a+4)*(b-4)), 40 );
	assert_equal( -5+(b-4), 0 );
	assert_equal( (-a)+b, 5 );
	assert_equal( -a-b*2-c, -17 );
	assert_equal( a*3*b, 108 );
	assert_equal( a*9/b, 4 );
	assert_equal( a*0+b%10, 9 );
	assert_equal( a*b+c-(-3-c), 29 );
	
	return print_test_set_result();
}

func test_concatenation() {
	setup_test_set("Test Concatenation");
	
	assert_equal( "abc"+"def", "abcdef" );
	assert_equal( "abc"+123, "abc123" );
	assert_equal( "abc"+12+3, "abc123" );
	assert_equal( "abc"+(12+3), "abc15" );
	assert_equal( 123+"abc", "123abc" );
	assert_equal( 1+2+"abc", "3abc" );
	assert_equal( 1+(2+"abc"), "12abc" );
	
	assert_equal( -2+"abc", "-2abc" );
	assert_equal( "abc"+(-2), "abc-2" );
	
	return print_test_set_result();
}

func test_comparision() {
	setup_test_set("Test Comparision");
	
	assert_true( 5 == 5 );
	assert_true( 5 > 4 );
	assert_true( 3+2 > 4 );
	assert_true( 2+2 >= 4 );
	assert_true( 2*3 >= 4 );
	assert_true( 0 < 9 );
	assert_true( -6 < (-5) );
	assert_true( 5 <= 5 );
	assert_true( -5 <= 5 );
	
	assert_true( (5 == 5) == true );
	assert_true( (5 == 6) == false );
	assert_false( (5 == 6) == true );
	
	assert_false( 5 < 1+2 );
	assert_false( -5 <= (-9) );
	assert_false( 9 > 10 );
	assert_false( 2*5 > 10 );
	assert_false( -8 > (-2) );
	assert_false( 3**2 >= 10 );
	assert_false( 9 == 10 );
	
	return print_test_set_result();
}

func test_assignment() {
	setup_test_set("Test Comparision");
	
	var a = 5*6;
	assert_equal(a, 30);
	a += 5;
	assert_equal(a, 35);
	a -= 15;
	assert_equal(a, 20);
	a /= 6;
	assert_equal(a, 3);
	a /.= 5;
	assert_equal(a, 0.6);
	a *= 10;
	assert_equal(a, 6);
	a %= 4;
	assert_equal(a, 2);
	a **= 3;
	assert_equal(a, 8);
	a++;
	assert_equal(a, 9);
	a--;
	assert_equal(a, 8);
	
	return print_test_set_result();
}

func main() {
	test_arithmetic();
	test_concatenation();
	test_comparision();
	test_assignment();
	
	if (all_pass)
		print("[Success]");
	else
		print("[Failed]");
}

main();